name: Full CI/CD with SonarCloud

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: us-south
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE_NAME: poke-api
  IKS_CLUSTER: cbadl00f0a0ufsaqopk0
  DEPLOYMENT_NAME: poke-api
  PORT: 5001

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  unit_test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install modules
        run: npm run prestart

      - name: Test
        run: npm run unit-test
  sonarcloud:
    name: SonarCloud
    needs: [unit_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  integration_test:
    name: Run integration tests
    needs: [unit_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install modules
        run: npm run prestart

      - name: Test
        run: npm run integration-test
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    needs: [integration_test]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Download and Install IBM Cloud CLI
      - name: Install IBM Cloud CLI
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud --version
          ibmcloud config --check-version=false
          ibmcloud plugin install -f kubernetes-service
          ibmcloud plugin install -f container-registry
      # Authenticate with IBM Cloud CLI
      - name: Authenticate with IBM Cloud CLI
        run: |
          ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
          ibmcloud cr region-set "${IBM_CLOUD_REGION}"
          ibmcloud cr login
      # Build the Docker image
      - name: Build with Docker
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .
      # Push the image to IBM Container Registry
      - name: Push the image to ICR
        run: |
          docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA
      # Deploy the Docker image to the IKS cluster
      - name: Deploy to IKS
        run: |
          ibmcloud ks cluster config --cluster $IKS_CLUSTER
          kubectl config current-context
          kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
          kubectl apply -f deployment.yaml
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
          kubectl apply -f service.yaml
          kubectl get services -o wide
